@model NWHarvest.Web.ViewModels.ListingViewModel

@{
    ViewBag.Title = $"{Model.UserName} - Create Listing";
}
<div class="container-fluid">
    <h3>@ViewBag.Title</h3>
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <hr />
        <div class="form-group">
            @Html.LabelFor(model => model.Product, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Product, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Product, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.QuantityAvailable, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.QuantityAvailable, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.QuantityAvailable, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.CostPerUnit, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="input-group">
                    <span class="input-group-addon">$</span>
                    @Html.EditorFor(model => model.CostPerUnit, new { htmlAttributes = new { @class = "form-control", @Value = "0" } })
                </div>
                @Html.ValidationMessageFor(model => model.CostPerUnit, "", new { @class = "text-danger" })
                <p>If you are not donating your product please change the cost field to reflect the cost to food programs.</p>
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.UnitOfMeasure, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.UnitOfMeasure, new { htmlAttributes = new { @class = "form-control", placeholder = "lb,each,box" } })
                @Html.ValidationMessageFor(model => model.UnitOfMeasure, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.HarvestDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="input-append date input-group" id="harvestDateGroup" data-date="@Model.HarvestDate">
                    @Html.EditorFor(model => model.HarvestDate, new { htmlAttributes = new { @class = "form-control" } })
                    <span class="input-group-addon add-on" id="basic-addon2"><i class="glyphicon-calendar glyphicon"></i></span>
                </div>
                @Html.ValidationMessageFor(model => model.HarvestDate, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.ExpirationDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="input-append date input-group" id="expiresDateGroup" data-date="@Model.ExpirationDate">
                    @Html.EditorFor(model => model.ExpirationDate, new { htmlAttributes = new { @class = "form-control" } })
                    <span class="input-group-addon add-on"><i class="glyphicon-calendar glyphicon"></i></span>
                </div>
                @Html.ValidationMessageFor(model => model.ExpirationDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PickupLocationId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(m => m.PickupLocationId, Model.PickupLocations, "Select Pickup Location", new { @class = "form-control" })
                <div>
                    @Html.ValidationMessageFor(model => model.PickupLocationId, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Comments, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Comments, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Comments, "", new { @class = "text-danger" })
                <p>Please include any relevant scheduling and pickup instructions.</p>
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-success" />
                @Html.ActionLink("Cancel", "Index", "Listings", null, new { @class = "btn btn-default" })
            </div>
        </div>
    </div>
    }
</div>
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        $('#harvestDateGroup').datepicker();
        $('#expiresDateGroup').datepicker();
    </script>
}
